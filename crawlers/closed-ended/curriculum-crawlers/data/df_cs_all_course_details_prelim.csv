,Academic Year,No. of credit(s),Lecture,Lab session,Pre-requisite(s),Co-requisite(s),Mutually exclusive with,Remarks,Course Code,Course Description,Learning Outcomes,Continuous Assessment Weighting in final course grade (%),Written Examination Weighting in final course grade (%),Tutorial,Other,Recommended Learning Hours,Self-study & practical modules,Choi Loretta
0,2022,6,32.5,6.5,,,ENGG1111 or ENGG1330,,COMP1117A,"This is an introductory course in computer programming. Students will acquire basic Python programming skills, including syntax, identifiers, control statements, functions, recursions, strings, lists, dictionaries, tuples and files. Searching and sorting algorithms, such as sequential search, binary search, bubble sort, insertion sort and selection sort, will also be covered. ",[Computational mind]  Able to identify possible solutions for problems based on computer programs.; [Program implementation]  Able to implement solutions for problems using Python; [Program comprehension]  Able to understand programs written by others and participate in larger scale system implementation.,50,50,,,,,
1,2022,6,32.5,6.5,,,ENGG1111 or ENGG1330,,COMP1117B,"This is an introductory course in computer programming. Students will acquire basic Python programming skills, including syntax, identifiers, control statements, functions, recursions, strings, lists, dictionaries, tuples and files. Searching and sorting algorithms, such as sequential search, binary search, bubble sort, insertion sort and selection sort, will also be covered. ",[Computational mind]  Able to identify possible solutions for problems based on computer programs.; [Program implementation]  Able to implement solutions for problems using Python; [Program comprehension]  Able to understand programs written by others and participate in larger scale system implementation.,50,50,,,,,
2,2022,6,,,,,COMP1117 or ENGG1111,,ENGG1330A,"This is an introductory course designed for first-year engineering students to learn about computer programming. Students will acquire basic Python programming skills, including syntax, identifiers, control statements, functions, recursions, strings, lists, dictionaries, tuples and files. Searching and sorting algorithms, such as sequential search, binary search, bubble sort, insertion sort and selection sort, will also be covered. ",[Computational mind] Able to identify possible solutions for problems based on computer programs; [Program implementation] Able to implement solutions for problems using Python; [Program comprehension] Able to understand programs written by others and participate in larger scale system implementation,70,30,26.0,13.0,,,
3,2022,6,2.0,,ENGG1330,,COMP2113 or COMP2123,,ENGG1340A,"This course covers intermediate to advanced computer programming topics on various technologies and tools that are useful for software development. Topics include Linux shell commands, shell scripts, C/C++ programming, and separate compilation techniques and version control.  This is a self-learning course; there will be no lecture and students will be provided with self-study materials.  Students are required to complete milestone-based self-assessment tasks during the course.  This course is designed for students who are interested in Computer Science / Computer Engineering.","[Programming environment and technologies] Able to work comfortably on the Linux platform and utilize its basic functionalities for program development.; [Problem solving and program implementation] Able to understand and analyse a problem and implement appropriate solutions correctly using C/C++. Able to utilize debuggers and techniques like separate compilation, make files and version control to simplify and manage the program development process.; [Advanced programming techniques] Be able to understand and apply the principles of advanced programming techniques including recursion, dynamic memory management, STL, data structures and algorithms.; [Self learning] Be able to self-learn various programming techniques effectively.",70,30,13.0,,"Self-study & practical modules:
      39.0


Lecture:
      2.0


Tutorial:
      13.0",39.0,
4,2022,6,2.0,,ENGG1330,,COMP2113 or COMP2123,,ENGG1340B,"This course covers intermediate to advanced computer programming topics on various technologies and tools that are useful for software development. Topics include Linux shell commands, shell scripts, C/C++ programming, and separate compilation techniques and version control.  This is a self-learning course; there will be no lecture and students will be provided with self-study materials.  Students are required to complete milestone-based self-assessment tasks during the course.  This course is designed for students who are interested in Computer Science / Computer Engineering.","[Programming environment and technologies] Able to work comfortably on the Linux platform and utilize its basic functionalities for program development.; [Problem solving and program implementation] Able to understand and analyse a problem and implement appropriate solutions correctly using C/C++. Able to utilize debuggers and techniques like separate compilation, make files and version control to simplify and manage the program development process.; [Advanced programming techniques] Be able to understand and apply the principles of advanced programming techniques including recursion, dynamic memory management, STL, data structures and algorithms.; [Self learning] Be able to self-learn various programming techniques effectively.",70,30,13.0,,"Self-study & practical modules:
      39.0


Lecture:
      2.0


Tutorial:
      13.0",39.0,
5,2022,6,2.0,,ENGG1330,,COMP2113 or COMP2123,,ENGG1340C,"This course covers intermediate to advanced computer programming topics on various technologies and tools that are useful for software development. Topics include Linux shell commands, shell scripts, C/C++ programming, and separate compilation techniques and version control.  This is a self-learning course; there will be no lecture and students will be provided with self-study materials.  Students are required to complete milestone-based self-assessment tasks during the course.  This course is designed for students who are interested in Computer Science / Computer Engineering.","[Programming environment and technologies] Able to work comfortably on the Linux platform and utilize its basic functionalities for program development.; [Problem solving and program implementation] Able to understand and analyse a problem and implement appropriate solutions correctly using C/C++. Able to utilize debuggers and techniques like separate compilation, make files and version control to simplify and manage the program development process.; [Advanced programming techniques] Be able to understand and apply the principles of advanced programming techniques including recursion, dynamic memory management, STL, data structures and algorithms.; [Self learning] Be able to self-learn various programming techniques effectively.",70,30,13.0,,"Self-study & practical modules:
      39.0


Lecture:
      2.0


Tutorial:
      13.0",39.0,
6,2022,6,,,,,,,FITE1010,"This course introduces the basic concepts of financial technologies, including money and payment, digital finance and alternative finance. Major technological trends, such as e-payment system, cryptocurrency, blockchain, data mining and artificial intelligence, are introduced. Students are expected to understand recent FinTech developments and its impact in the financial industries.","[Foundation] Develop a broad understanding of the recent FinTech development and analyze their impact on the financial services industries.; [Technologies] Understand the technologies trends, such as artificial intelligence, blockchain and data mining.; [Design] Understand the basic principles of designing financial applications with technologies, such as e-payment and robo-advising.; [Application] Understand alternative finance, such as cloudfunding and P2P lending, and assess their impact on traditional banking.",40,60,6.0,,,,
7,2022,6,,12.0,COMP1117 or ENGG1330,,COMP2396 or COMP2502 or ELEC2543,,FITE2000A,"This course introduces concepts and applications of basic data structures. Commonly used data structures, which include stacks and queues, trees, lists, arrays and graphs, will be discussed. Basic algorithms, both recursive and non-recursive, to manipulate these data structures will also be discussed.Basic object-oriented programming principles, which are abstraction, encapsulation, inheritance and polymorphism, will be introduced. The practical work of the course will use an object-oriented programming language and corresponding data structure library. Students will be required to apply the data structures to solve practical and/or FinTech problems.",[Basic data structures] To learn and appreciate the importance and merits of basic data structures; [Applying data structures] Able to select and apply appropriate data structures to solve practical problems; [Object-oriented Programming] Be able to understand better the object-oriented approach in programming. Students should be able to analyze and design a computer program to solve real world problems based on object-oriented principles.; [Object Oriented Programming Language and data structures library] Be able to write computer programs to solve real world problems using object oriented programming language and data structures library,50,50,,,,,
8,2022,6,,,,,,,STAT1005,,,,,,,,,
9,2022,6,2.0,,COMP1117 or ENGG1330,,COMP2123 or ENGG1340,,COMP2113A,"This course covers intermediate to advanced computer programming topics on various technologies and tools that are useful for software development. Topics include Linux shell commands, shell scripts, C/C++ programming, and separate compilation techniques and version control.  This is a self-learning course; there will be no lecture and students will be provided with self-study materials.  Students are required to complete milestone-based self-assessment tasks during the course.  This course is designed for students who are interested in Computer Science / Computer Engineering.","[Programming environment and technologies] Able to work comfortably on the Linux platform and utilize its basic functionalities for program development.; [Problem solving and program implementation] Able to understand and analyse a problem and implement appropriate solutions correctly using C/C++. Able to utilize debuggers and techniques like separate compilation, make files and version control to simplify and manage the program development process.; [Advanced programming techniques] Be able to understand and apply the principles of advanced programming techniques including recursion, dynamic memory management, STL, data structures and algorithms.; [Self learning] Be able to self-learn various programming techniques effectively.",70,30,13.0,,"Self-study & practical modules:
      39.0


Lecture:
      2.0


Tutorial:
      13.0",39.0,
10,2022,6,2.0,,COMP1117 or ENGG1330,,COMP2123 or ENGG1340,,COMP2113B,"This course covers intermediate to advanced computer programming topics on various technologies and tools that are useful for software development. Topics include Linux shell commands, shell scripts, C/C++ programming, and separate compilation techniques and version control.  This is a self-learning course; there will be no lecture and students will be provided with self-study materials.  Students are required to complete milestone-based self-assessment tasks during the course.  This course is designed for students who are interested in Computer Science / Computer Engineering.","[Programming environment and technologies] Able to work comfortably on the Linux platform and utilize its basic functionalities for program development.; [Problem solving and program implementation] Able to understand and analyse a problem and implement appropriate solutions correctly using C/C++. Able to utilize debuggers and techniques like separate compilation, make files and version control to simplify and manage the program development process.; [Advanced programming techniques] Be able to understand and apply the principles of advanced programming techniques including recursion, dynamic memory management, STL, data structures and algorithms.; [Self learning] Be able to self-learn various programming techniques effectively.",70,30,13.0,,"Self-study & practical modules:
      39.0


Lecture:
      2.0


Tutorial:
      13.0",39.0,
11,2022,6,2.0,,COMP1117 or ENGG1330,,COMP2123 or ENGG1340,,COMP2113C,"This course covers intermediate to advanced computer programming topics on various technologies and tools that are useful for software development. Topics include Linux shell commands, shell scripts, C/C++ programming, and separate compilation techniques and version control.  This is a self-learning course; there will be no lecture and students will be provided with self-study materials.  Students are required to complete milestone-based self-assessment tasks during the course.  This course is designed for students who are interested in Computer Science / Computer Engineering.","[Programming environment and technologies] Able to work comfortably on the Linux platform and utilize its basic functionalities for program development.; [Problem solving and program implementation] Able to understand and analyse a problem and implement appropriate solutions correctly using C/C++. Able to utilize debuggers and techniques like separate compilation, make files and version control to simplify and manage the program development process.; [Advanced programming techniques] Be able to understand and apply the principles of advanced programming techniques including recursion, dynamic memory management, STL, data structures and algorithms.; [Self learning] Be able to self-learn various programming techniques effectively.",70,30,13.0,,"Self-study & practical modules:
      39.0


Lecture:
      2.0


Tutorial:
      13.0",39.0,
12,2022,6,34.0,,COMP2113 or COMP2123 or ENGG1340,,,,COMP2119A,"Arrays, linked lists, trees and graphs; stacks and queues; symbol tables; priority queues, balanced trees; sorting algorithms; complexity analysis.","[Mathematics foundation]  understand the concept of time, space complexity and analyze the time and space complexities of an algorithm and a data structure.; [Data structures]  understand well-known generic data structures such as stack, queue, tree and related algorithms and apply them to solve problems.; [Problem solving]  design new data structures and algorithms to solve problems.; [Implementation]  implement selected data structures and algorithms.",40,60,5.0,,"Lecture:
      34.0


Tutorial:
      5.0",,
13,2022,6,34.0,,COMP2113 or COMP2123 or ENGG1340,,,,COMP2119B,"Arrays, linked lists, trees and graphs; stacks and queues; symbol tables; priority queues, balanced trees; sorting algorithms; complexity analysis.","[Mathematics foundation]  understand the concept of time, space complexity and analyze the time and space complexities of an algorithm and a data structure.; [Data structures]  understand well-known generic data structures such as stack, queue, tree and related algorithms and apply them to solve problems.; [Problem solving]  design new data structures and algorithms to solve problems.; [Implementation]  implement selected data structures and algorithms.",40,60,5.0,,"Lecture:
      34.0


Tutorial:
      5.0",,
14,2022,6,34.0,,COMP2113 or COMP2123 or ENGG1340,,,,COMP2119C,"Arrays, linked lists, trees and graphs; stacks and queues; symbol tables; priority queues, balanced trees; sorting algorithms; complexity analysis.","[Mathematics foundation]  understand the concept of time, space complexity and analyze the time and space complexities of an algorithm and a data structure.; [Data structures]  understand well-known generic data structures such as stack, queue, tree and related algorithms and apply them to solve problems.; [Problem solving]  design new data structures and algorithms to solve problems.; [Implementation]  implement selected data structures and algorithms.",40,60,5.0,,"Lecture:
      34.0


Tutorial:
      5.0",,
15,2022,6,33.0,,,COMP1117 or ENGG1330,ELEC2441,,COMP2120A,"To introduce the hardware organization of computers, and detailed operations of computers through assembly language programming.Introduction to computer organization and architecture; data representations; instruction sets; machine and assembly languages; basic logic design and integrated devices; the central processing unit and its control; memory and caches; I/O and storage systems; computer arithmetic.","[Basic Computer Organization]  Understand the basic components of a computer, including CPU, memories, and input/output, and their organization.; [Design Issues]  Understand the cost performance tradeoff in designing memory hierarchy and instruction sets.; [Assembly Language Programming]  Understand and be able to use assembly languages for solving simple problems. Understand the relationship between high level language and assembly language.; [Modern Trends]  Be able to follow the trends in computer design and appreciate the design philosophy behind.",50,50,6.0,,,,
16,2022,6,33.0,,,COMP1117 or ENGG1330,ELEC2441,,COMP2120B,"To introduce the hardware organization of computers, and detailed operations of computers through assembly language programming.Introduction to computer organization and architecture; data representations; instruction sets; machine and assembly languages; basic logic design and integrated devices; the central processing unit and its control; memory and caches; I/O and storage systems; computer arithmetic.","[Basic Computer Organization]  Understand the basic components of a computer, including CPU, memories, and input/output, and their organization.; [Design Issues]  Understand the cost performance tradeoff in designing memory hierarchy and instruction sets.; [Assembly Language Programming]  Understand and be able to use assembly languages for solving simple problems. Understand the relationship between high level language and assembly language.; [Modern Trends]  Be able to follow the trends in computer design and appreciate the design philosophy behind.",50,50,6.0,,,,
17,2022,6,33.0,,,,MATH3600,,COMP2121A,"This course provides students a solid background on discrete mathematics and structures pertinent to computer science. Topics include logic; set theory; mathematical reasoning; counting techniques; discrete probability; trees, graphs, and related algorithms; modeling computation.","[Abstract Concepts] Understand abstract mathematical concepts which are fundamental to computer science, e.g., logic, sets, functions, basic probability, graph theory.; [Proof Techniques] Be able to perform abstract thinking and present logical argument using techniques such as mathematical induction, proof by contradiction.; [Basic analysis techniques] able to apply formal reasoning to analyze and enumerate the possible outcomes of a computational problem e.g. model and compute the number of operations using recursion, counting and combinatorics.",50,50,6.0,,"Lecture:
      33.0


Tutorial:
      6.0",,
18,2022,6,33.0,,,,MATH3600,,COMP2121B,"This course provides students a solid background on discrete mathematics and structures pertinent to computer science. Topics include logic; set theory; mathematical reasoning; counting techniques; discrete probability; trees, graphs, and related algorithms; modeling computation.","[Abstract Concepts] Understand abstract mathematical concepts which are fundamental to computer science, e.g., logic, sets, functions, basic probability, graph theory.; [Proof Techniques] Be able to perform abstract thinking and present logical argument using techniques such as mathematical induction, proof by contradiction.; [Basic analysis techniques] able to apply formal reasoning to analyze and enumerate the possible outcomes of a computational problem e.g. model and compute the number of operations using recursion, counting and combinatorics.",50,50,6.0,,"Lecture:
      33.0


Tutorial:
      6.0",,
19,2022,6,33.0,,,,MATH3600,,COMP2121C,"This course provides students a solid background on discrete mathematics and structures pertinent to computer science. Topics include logic; set theory; mathematical reasoning; counting techniques; discrete probability; trees, graphs, and related algorithms; modeling computation.","[Abstract Concepts] Understand abstract mathematical concepts which are fundamental to computer science, e.g., logic, sets, functions, basic probability, graph theory.; [Proof Techniques] Be able to perform abstract thinking and present logical argument using techniques such as mathematical induction, proof by contradiction.; [Basic analysis techniques] able to apply formal reasoning to analyze and enumerate the possible outcomes of a computational problem e.g. model and compute the number of operations using recursion, counting and combinatorics.",50,50,6.0,,"Lecture:
      33.0


Tutorial:
      6.0",,
20,2022,6,26.0,,COMP2113 or COMP2123 or ENGG1340,,ELEC2543 or FITE2000,,COMP2396A,Introduction to object-oriented programming; abstract data types and classes; inheritance and polymorphism; object-oriented program design; Java language and its program development environment; user interfaces and GUI programming; collection class and iteration protocol; program documentation.,"[Object-oriented Programming] Be able to understand better the object-oriented approach in programming. Students should be able to analyze and design a computer program to solve real world problems based on object-oriented principles.; [Java Programming Language] Be able to write computer programs to solve real world problems in Java; [Good Documentation Practices] To learn and appreciate the importance and merits of proper comments in source code and API documentations; [GUI Programming] Be able to write simple GUI interfaces for a computer program to interact with users, and to understand the event-based GUI handling principles.",50,50,26.0,,,,
21,2022,6,26.0,,COMP2113 or COMP2123 or ENGG1340,,ELEC2543 or FITE2000,,COMP2396B,Introduction to object-oriented programming; abstract data types and classes; inheritance and polymorphism; object-oriented program design; Java language and its program development environment; user interfaces and GUI programming; collection class and iteration protocol; program documentation.,"[Object-oriented Programming] Be able to understand better the object-oriented approach in programming. Students should be able to analyze and design a computer program to solve real world problems based on object-oriented principles.; [Java Programming Language] Be able to write computer programs to solve real world problems in Java; [Good Documentation Practices] To learn and appreciate the importance and merits of proper comments in source code and API documentations; [GUI Programming] Be able to write simple GUI interfaces for a computer program to interact with users, and to understand the event-based GUI handling principles.",50,50,26.0,,,,
22,2022,6,,,FITE1010 or MATH1853 or MATH2101; and COMP2119 or ELEC2543 or FITE2000,,,,FITE2010,"This course introduces basic theories of blockchain and distributed ledger, which includes basic cryptography, public key cryptosystem, distributed computing and consensus protocols. Financial applications of blockchain and distributed ledger will be discussed.","[Technical foundation] Identify key components behind the design of a distributed ledger (and blockchain) and evaluate different designs/solutions for implementing a distributed ledge.; [Applications and programming] Understand the types of applications that best fit the model of distributed ledger; program applications on some popular platforms.; [Cryptocurrency and related issues] Understand the technologies behind different cryptocurrencies, their applications, and related issues (e.g. Regulations).; [Limitations and extensions] Understand the limitations, pros and cons of a distributive ledger, possible enhancements to existing platforms, and identify new applications.",40,60,6.0,,,,
23,2022,6,39.0,,COMP2113 or COMP2123 or ENGG1340; and COMP2120 or ELEC2441,,,,COMP3230A,"Operating system structures, process and thread, CPU scheduling, process synchronization, deadlocks, memory management, file systems, I/O systems and device driver, mass-storage structure and disk scheduling, case studies.","[Fundamentals] Be able to discuss the characteristics of different structures of the Operating Systems (such as microkernel, layered, virtualization, etc.) and identify the core functions of the Operating Systems.; [Principles] Be able to explain the principles and compare the algorithms on which the core functions of the Operating Systems are built on.; [Performance] Be able to analyze and evaluate the algorithms of the core functions of the Operating Systems and explain the major performance issues with regard to the core functions.; [Practicability] Be able to demonstrate knowledge in applying system software and tools available in modern operating system (such as threads, system calls, semaphores, etc.) for software development.",50,50,,,,,
24,2022,6,39.0,,COMP2113 or COMP2123 or ENGG1340; and COMP2120 or ELEC2441,,,,COMP3230B,"Operating system structures, process and thread, CPU scheduling, process synchronization, deadlocks, memory management, file systems, I/O systems and device driver, mass-storage structure and disk scheduling, case studies.","[Fundamentals] Be able to discuss the characteristics of different structures of the Operating Systems (such as microkernel, layered, virtualization, etc.) and identify the core functions of the Operating Systems.; [Principles] Be able to explain the principles and compare the algorithms on which the core functions of the Operating Systems are built on.; [Performance] Be able to analyze and evaluate the algorithms of the core functions of the Operating Systems and explain the major performance issues with regard to the core functions.; [Practicability] Be able to demonstrate knowledge in applying system software and tools available in modern operating system (such as threads, system calls, semaphores, etc.) for software development.",50,50,,,,,
25,2022,6,37.0,4.0,COMP2113 or COMP2123 or ELEC2543 or ENGG1340; and COMP2120 or ELEC2441,,ELEC3443,,COMP3234A,Network structure and architecture; reference models; stop and wait protocol; sliding window protocols; virtual circuits and datagrams; IP addressing and routing; flow control; congestion control; local area networks; transport protocols and application layer; and examples of network protocols.,"[Concepts] Be able to explain the terminologies of computer networks, such as host, links, protocol stack, access/core network, throughput, etc.; be able to describe the services and functions provided by each layer in the Internet protocol stack.; [Technologies and Protocols] Be able to describe the working principles behind key network technologies, such as circuit/packet switching, reliable data transfer, flow/congestion control, routing, multiple access, etc., and key protocols used in modern computer networks, such as 802.11 WiFi, Ethernet, ARP, IP, TCP, etc.; [Analysis] Be able to calculate packet delay, throughput, and channel efficiency according to different network protocols; be able to carry out reliable data transfer protocols and routing algorithms in given networks.; [Implementation] Be able to demonstrate knowledge in using Socket Interface to design and implement network protocols, such as designing a network application, implementing a reliable data transfer protocol in given networks.; [Practicability] Be able to plan for IP networks and properly assign IP addresses to interfaces in given networks.",50,50,5.0,,,,
26,2022,6,37.0,4.0,COMP2113 or COMP2123 or ELEC2543 or ENGG1340; and COMP2120 or ELEC2441,,ELEC3443,,COMP3234B,Network structure and architecture; reference models; stop and wait protocol; sliding window protocols; virtual circuits and datagrams; IP addressing and routing; flow control; congestion control; local area networks; transport protocols and application layer; and examples of network protocols.,"[Concepts] Be able to explain the terminologies of computer networks, such as host, links, protocol stack, access/core network, throughput, etc.; be able to describe the services and functions provided by each layer in the Internet protocol stack.; [Technologies and Protocols] Be able to describe the working principles behind key network technologies, such as circuit/packet switching, reliable data transfer, flow/congestion control, routing, multiple access, etc., and key protocols used in modern computer networks, such as 802.11 WiFi, Ethernet, ARP, IP, TCP, etc.; [Analysis] Be able to calculate packet delay, throughput, and channel efficiency according to different network protocols; be able to carry out reliable data transfer protocols and routing algorithms in given networks.; [Implementation] Be able to demonstrate knowledge in using Socket Interface to design and implement network protocols, such as designing a network application, implementing a reliable data transfer protocol in given networks.; [Practicability] Be able to plan for IP networks and properly assign IP addresses to interfaces in given networks.",50,50,5.0,,,,
27,2022,6,,,,,COMP3250 or COMP3252,,COMP3251,"The course introduces various algorithm design techniques, including divide and conquer, greedy, and dynamic programming, and studies selected topics on graph algorithms. These techniques can be used to design better algorithms in various areas of computer science. The course also gives an overview of NP-complete problems.",,50,50,,,,,
28,2022,6,,,,,COMP3250 or COMP3251,,COMP3252,"The course studies principles of algorithm design and the analysis of sophisticated algorithms (regarding proof of correctness and time complexity). Topics include divide-and-conquer, dynamic programming, greedy algorithms, graph algorithms, network flow, geometric algorithms, and NP-completeness.  The course puts emphasis on mathematical rigor; it expects students to figure out the mathematics and logic that make algorithms work.  Students can form pairs to discuss the assignments and are required to write rigorous proofs of correctness and analysis independently.",,50,50,,,,,
29,2022,6,31.0,,COMP2119 or COMP2502 or ELEC2543 or FITE2000,,IIMT3601,,COMP3278A,"This course studies the principles, design, administration, and implementation of database management systems.  Topics include: entity-relationship model, relational model, relational algebra, database design and normalization, database query languages, indexing schemes, integrity and concurrency control.",[Information Modeling] Able to understand the modeling of real-life information in a database system.; [Query Languages] Able to understand and use the languages designed for data access.; [System Design]     Able to understand the design issues of an efficient and reliable database system.; [Application Development] Able to implement a practical application on a real database.,50,50,8.0,,,,
30,2022,6,31.0,,COMP2119 or COMP2502 or ELEC2543 or FITE2000,,IIMT3601,,COMP3278B,"This course studies the principles, design, administration, and implementation of database management systems.  Topics include: entity-relationship model, relational model, relational algebra, database design and normalization, database query languages, indexing schemes, integrity and concurrency control.",[Information Modeling] Able to understand the modeling of real-life information in a database system.; [Query Languages] Able to understand and use the languages designed for data access.; [System Design]     Able to understand the design issues of an efficient and reliable database system.; [Application Development] Able to implement a practical application on a real database.,50,50,8.0,,,,
31,2022,6,36.0,,COMP2113 or COMP2123 or ENGG1340,,IIMT3602,,COMP3297A,"This course introduces the fundamental principles, methodologies and practices of modern software engineering. It covers the software process, and development activities including requirements engineering, software design, testing, deployment and evolution. The course emphasizes the use of contemporary tools, frameworks and techniques. It features a complete agile development project in which students work in teams to engineer and cloud-deploy a software service to satisfy their clients’ needs.","[Software engineering foundation] Able to demonstrate an understanding of the software development process and activities including the analysis, design, implementation, testing and deployment of contemporary software systems.; [Software engineering methodology] Able to apply the software process and process activities to real-world software development.; [Software engineering tools and techniques] Able to use industry standard tools and techniques for software development.; [Software engineering practice] Able to plan, work and contribute effectively as a member of self-organizing software development teams.",50,50,3.0,,,,
32,2022,6,36.0,,COMP2113 or COMP2123 or ENGG1340,,IIMT3602,,COMP3297B,"This course introduces the fundamental principles, methodologies and practices of modern software engineering. It covers the software process, and development activities including requirements engineering, software design, testing, deployment and evolution. The course emphasizes the use of contemporary tools, frameworks and techniques. It features a complete agile development project in which students work in teams to engineer and cloud-deploy a software service to satisfy their clients’ needs.","[Software engineering foundation] Able to demonstrate an understanding of the software development process and activities including the analysis, design, implementation, testing and deployment of contemporary software systems.; [Software engineering methodology] Able to apply the software process and process activities to real-world software development.; [Software engineering tools and techniques] Able to use industry standard tools and techniques for software development.; [Software engineering practice] Able to plan, work and contribute effectively as a member of self-organizing software development teams.",50,50,3.0,,,,
33,2022,0,,,,,,,COMP3410A,"The course consists of two components: internship and professionalism. Internship requires students to spend a minimum of four weeks employed, full-time, as IT interns or trainees. During this period, they are engaged in work of direct relevance to their programme of study. The Internship provides students with practical, real-world experience and represents a valuable complement to their academic training. Professionalism exposes students to social and professional issues in computing. Students need to understand their professional roles when working as computer professionals as well as the responsibility that they will bear. They also need to develop the ability to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions. Topics include social context of computing, risks, safety and security concerns for computer professionals, professional and ethical responsibilities, and continuing professional development.","[Working Experience] Gain solid, practical experience in a job placement related to the field of IT.; [Communication] Develop effective technical and interpersonal communication skills for engagement with people of diverse backgrounds in a work environment.; [Professionalism] Recognize the responsibilities of computer professionals, and have the commitment to professionalism.; [IT and society] Able to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions.; [CPD] Recognize the importance of continual development as a computing professional.",,,,,,,
34,2022,0,,,,,,,COMP3410B,"The course consists of two components: internship and professionalism. Internship requires students to spend a minimum of four weeks employed, full-time, as IT interns or trainees. During this period, they are engaged in work of direct relevance to their programme of study. The Internship provides students with practical, real-world experience and represents a valuable complement to their academic training. Professionalism exposes students to social and professional issues in computing. Students need to understand their professional roles when working as computer professionals as well as the responsibility that they will bear. They also need to develop the ability to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions. Topics include social context of computing, risks, safety and security concerns for computer professionals, professional and ethical responsibilities, and continuing professional development.","[Working Experience] Gain solid, practical experience in a job placement related to the field of IT.; [Communication] Develop effective technical and interpersonal communication skills for engagement with people of diverse backgrounds in a work environment.; [Professionalism] Recognize the responsibilities of computer professionals, and have the commitment to professionalism.; [IT and society] Able to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions.; [CPD] Recognize the importance of continual development as a computing professional.",,,,,,,
35,2022,6,,,,,,,COMP3412A,"The course consists of two components: internship and professionalism. Internship requires students to spend a minimum of four weeks employed, full-time, as IT interns or trainees. During this period, they are engaged in work of direct relevance to their programme of study. The Internship provides students with practical, real-world experience and represents a valuable complement to their academic training. Professionalism exposes students to social and professional issues in computing. Students need to understand their professional roles when working as computer professionals as well as the responsibility that they will bear. They also need to develop the ability to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions. Topics include social context of computing, risks, safety and security concerns for computer professionals, professional and ethical responsibilities, and continuing professional development.","[Working Experience] Gain solid, practical experience in a job placement related to the field of IT.; [Commuication] Develop effective technical and interpersonal communication skills for engagement with people of diverse backgrounds in a work environment.; [Professionalism] Recognize the responsibilities of computer professionals, and have the commitment to professionalism.; [IT and society] Able to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions.; [CPD] Recognize the importance of continual development as a computing professional.",100,,,,,,
36,2022,6,,,,,,,COMP3412B,"The course consists of two components: internship and professionalism. Internship requires students to spend a minimum of four weeks employed, full-time, as IT interns or trainees. During this period, they are engaged in work of direct relevance to their programme of study. The Internship provides students with practical, real-world experience and represents a valuable complement to their academic training. Professionalism exposes students to social and professional issues in computing. Students need to understand their professional roles when working as computer professionals as well as the responsibility that they will bear. They also need to develop the ability to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions. Topics include social context of computing, risks, safety and security concerns for computer professionals, professional and ethical responsibilities, and continuing professional development.","[Working Experience] Gain solid, practical experience in a job placement related to the field of IT.; [Commuication] Develop effective technical and interpersonal communication skills for engagement with people of diverse backgrounds in a work environment.; [Professionalism] Recognize the responsibilities of computer professionals, and have the commitment to professionalism.; [IT and society] Able to ask serious questions about the social impact of computing and to evaluate proposed answers to those questions.; [CPD] Recognize the importance of continual development as a computing professional.",100,,,,,,
37,2022,12,,,,,COMP4802,,COMP4801,"Student individuals or groups, during the final year of their studies, undertake full end-toend development of a substantial project, taking it from initial concept through to final delivery. Topics range from applied software development to assignments on basic research. In case of a team project, significant contribution is required from each member and students are assessed individually, such that each student is given a separate project title. Strict standards of quality will be enforced throughout the project development.","[Knowledge of computing] Students' ability to apply knowledge of computing to solving the problem in the project.; [Problem identification] Students’ ability to identify and define the computing requirements appropriate to the project scenario.; [Problem analysis] Students’ ability to analyze the identified problem.; [System design] Students’ ability to design a computer-based system, process, component, or programme to meet desired needs.; [System implementation] Students' ability to implement a computer-based system, process, component, or programme to meet desired needs.; [System evaluation] Students’ ability to evaluate how effective the proposed solution is and how it can be made more effective.; [Teamwork] Students’ ability to function effectively on teams to accomplish a common goal.; [Professional practices] Students’ ability to understand the professional, ethical, legal, security and social issues and responsibilities.; [Communication] Students’ ability to communicate effectively with a range of audiences (On the project objectives, project achievements and project impact).; [Analyzing project impact] Students’ ability to analyze the local and global impact of the project on individuals, organizations, and society.; [Continuous improvement] Students’ ability to engage, or recognize the need of continuing professional development of the project.; [Contemporary knowledge] Students’ ability to use current techniques, skills, and tools necessary for computing practice with an understanding of the limitations.",100,,,,,,
38,2022,6,,,,,COMP4801,,COMP4802A,,"[Process]  Plan and carry out the full lifecycle of software projects similar in scope to what students are expected to undertake after graduation;; [Application]  Apply the knowledge, methodology and techniques of undergraduate courses to practical projects in a professional manner;; [Communication]  Communicate with users and peers with regard to user requirements and technical concepts verbally (via meetings and presentations), in writing (via reports) and in action (via demonstrations);; [Decision Making]  Overcome unforeseen problems, make informed decisions, and work under the constraints of limited time, human and financial resources.",100,,,,,,(Class B)
39,2022,6,,,,,COMP4801,,COMP4802B,,"[Process]  Plan and carry out the full lifecycle of software projects similar in scope to what students are expected to undertake after graduation;; [Application]  Apply the knowledge, methodology and techniques of undergraduate courses to practical projects in a professional manner;; [Communication]  Communicate with users and peers with regard to user requirements and technical concepts verbally (via meetings and presentations), in writing (via reports) and in action (via demonstrations);; [Decision Making]  Overcome unforeseen problems, make informed decisions, and work under the constraints of limited time, human and financial resources.",100,,,,,,(Class B)
40,2022,6,,,,,COMP4801,,COMP4802A,,"[Process]  Plan and carry out the full lifecycle of software projects similar in scope to what students are expected to undertake after graduation;; [Application]  Apply the knowledge, methodology and techniques of undergraduate courses to practical projects in a professional manner;; [Communication]  Communicate with users and peers with regard to user requirements and technical concepts verbally (via meetings and presentations), in writing (via reports) and in action (via demonstrations);; [Decision Making]  Overcome unforeseen problems, make informed decisions, and work under the constraints of limited time, human and financial resources.",100,,,,,,(Class B)
41,2022,6,,,,,COMP4801,,COMP4802B,,"[Process]  Plan and carry out the full lifecycle of software projects similar in scope to what students are expected to undertake after graduation;; [Application]  Apply the knowledge, methodology and techniques of undergraduate courses to practical projects in a professional manner;; [Communication]  Communicate with users and peers with regard to user requirements and technical concepts verbally (via meetings and presentations), in writing (via reports) and in action (via demonstrations);; [Decision Making]  Overcome unforeseen problems, make informed decisions, and work under the constraints of limited time, human and financial resources.",100,,,,,,(Class B)
42,2022,6,,,,,,,COMP4804,"Students during the final year of their studies undertake a substantial project, taking it from initial concept through to final delivery, and integrating their knowledge and skills on computing.","[Process] Plan and carry out the full lifecycle of software projects similar in scope to what students are expected to undertake after graduation;; [Application] Apply the knowledge, methodology and techniques of undergraduate courses to practical projects in a professional manner;; [Communication] Communicate with users and peers with regard to user requirements and technical concepts verbally (via meetings and presentations), in writing (via reports) and in action (via demonstrations);; [Decision Making] Overcome unforeseen problems, make informed decisions, and work under the constraints of limited time, human and financial resources.",100,,,,,,
43,2022,6,,,,,,,COMP4805,"Students during the final year of their studies undertake a substantial project, taking it from initial concept through to final delivery, and integrating their knowledge and skills on computing.","[Process] Plan and carry out the full lifecycle of software projects similar in scope to what students are expected to undertake after graduation;; [Application] Apply the knowledge, methodology and techniques of undergraduate courses to practical projects in a professional manner;; [Communication] Communicate with users and peers with regard to user requirements and technical cocepts verbally (via meetings and presentations), in writing (via reports) and in action (via demonstrations);; [Decision Making] Overcome unforeseen problems, make informed decisions, and work under the constraints of limited time, human and financial resources.",100,,,,,,
44,2022,6,,,,,,,FITE4801,"Student individuals or groups, during the final year of their studies, undertake full end-to-end development of a substantial project, taking it from initial concept through to final delivery. The project will be the application of technology to finance discipline.","[Process] Plan and carry out projects with the scope related to financial technology that the students are expected to undertake after graduation; [Application] Apply the knowledge, methodology and techniques of undergraduate courses to practical projects in a professional manner; [Communication] Communicate with users and peers with regard to user requirements and technical concepts verbally (via meetings and presentations), in writing (via reports) and in action (via demonstrations); [Decision Making] Overcome unforeseen problems, make informed decisions, and work under the constraints of limited time, human and financial resources",100,,,,,,
45,2022,6,27.0,,COMP1117 or ENGG1330,,STAT1005 or STAT1015,,COMP2501A,"The course introduces basic concepts and methodology of data science. The goal of this course is to provide students with an overview and practical experience of the entire data analysis process. Topics include: data source and data acquisition, data preparation and manipulation, exploratory data analysis, statistical and predictive analysis, data visualization and communication. ",[Data Preparation and Manipulation] Able to demonstrate practical knowledge in data preparation and data manipulation.; [Data Analysis] Able to use appropriate modelling and analysis techniques for data science problems.; [Implementation] Able to implement practical solutions for data science problems.; [Visualization and Communication] Able to communicate data analysis results effectively.,50,50,12.0,,,,
46,2022,6,27.0,,COMP1117 or ENGG1330,,STAT1005 or STAT1015,,COMP2501B,"The course introduces basic concepts and methodology of data science. The goal of this course is to provide students with an overview and practical experience of the entire data analysis process. Topics include: data source and data acquisition, data preparation and manipulation, exploratory data analysis, statistical and predictive analysis, data visualization and communication. ",[Data Preparation and Manipulation] Able to demonstrate practical knowledge in data preparation and data manipulation.; [Data Analysis] Able to use appropriate modelling and analysis techniques for data science problems.; [Implementation] Able to implement practical solutions for data science problems.; [Visualization and Communication] Able to communicate data analysis results effectively.,50,50,12.0,,,,
47,2022,6,,12.0,COMP1117 or ENGG1330,,COMP2396 or ELEC2543 or FITE2000,,COMP2502,"This course introduces concepts and applications of basic data structures. Commonly used data structures, which include stacks and queues, trees, lists, arrays and graphs, will be discussed. Basic algorithms, both recursive and non-recursive, to manipulate these data structures will also be discussed.Basic object-oriented programming principles, which are abstraction, encapsulation, inheritance and polymorphism, will be introduced. The practical work of the course will use an object-oriented programming language and corresponding data structure library. Students will be required to apply the data structures to solve practical and/or FinTech problems.",[Basic data structures] To learn and appreciate the importance and merits of basic data structures; [Applying data structures] Able to select and apply appropriate data structures to solve practical problems; [Object-oriented Programming] Be able to understand better the object-oriented approach in programming. Students should be able to analyze and design a computer program to solve real world problems based on object-oriented principles.; [Object Oriented Programming Language and data structures library] Be able to write computer programs to solve real world problems using object oriented programming language and data structures library,50,50,,,,,
48,2022,6,,,COMP2120,,,,COMP3231,Introduction to computer design process; performance and cost analysis; instruction set design; data-path and controller design; pipelining; memory system; I/O design; GPU architecture and programming; introduction to advanced topics.,[Computer architecture fundamentals] Be able to understand the basic principles of computer architecture; [Computer architecture design] Be able to understand the design of modern processors; [Computer architecture evaluation] Be able to understand the evaluation of the performance of modern processor,40,60,13.0,,,,
49,2022,6,,,COMP2119 or FITE2000,,,,COMP3235,"Lexical analysis; symbol table management; parsing techniques; error detection; error recovery; error diagnostics; run-time memory management; optimization; code generation.","[Theoretical foundation] Understand the important theories, in particular, lexical and syntax analysis, and optimization that underpin the construction and operation of compilers and translators.; [Compiler construction] Understand the various phases of a compiler, and how they are integrated to produce a working compiler.; [Compiler tools] Be able to apply popular compiler generation tools in particular, Lex and Yacc (or their improved variants) to compiler construction, and be able to modify any given grammar to fit the requirements of these tools.; [Compiler project] Be able to work in a team to develop, test, and deliver a complete working compiler for a real or realistic target machine.",50,50,2.0,,,,
50,2022,6,,,COMP2121,,,,COMP3258,"The course teaches the basics of functional programming using the language Haskell. The main goal is introduce students to fundamental programming concepts such as recursion, abstraction, lambda expressions and higher-order functions and data types. The course will also study the mathematical reasoning involved in the design of functional programs and techniques for proving properties about functions so defined. With the adoption of lambda expressions recent versions of Java, C++ or C#, functional programming and related programming techniques are becoming increasingly more relevant even for programmers of languages that are not traditionally viewed as functional. This course is important to introduce students to such techniques.","[Implementation] Implement programs correctly using Functional Programming techniques and Haskell. Students should also be able to use tools like Quickcheck to improve the development process.; [Technologies] To use the GHC compiler and the GHCI command line interpreter.; [Problem solving] To analyze and design solutions for problems using common functional programming modeling techniques. In particular students should be able to model data structures as algebraic datatypes, define operations by pattern matching and define properties that the operations should satisfy.; [Programming techniques] To understand and explain the principles of advanced functional programming techniques including recursion, datatypes, higher-order functions, functional data structures and algorithms.",50,50,5.0,,,,
51,2022,6,,,COMP2119 or FITE2000,,,,COMP3259,"Syntax and semantics specification; data types; data control and memory management; expressions, precedence and associativity of operators; control structures; comparative study of existing programming languages; advanced topics such as polymorphism, programming paradigms, exception handling and concurrency.",[Programming languages fundamentals] Be able to understand the fundamental principles underlying various programming languages features; [Programming language implementation] Be able to understand the basic algorithms in implementing simple programming languages; [Programming language designs] Be able to understand some principles in the design of programming languages,40,60,8.0,,,,
52,2022,6,36.0,,COMP2119 or FITE2000,,ELEC4544 or IIMT3688,,COMP3270A,This is an introduction course on the subject of artificial intelligence. Topics include: intelligent agents; search techniques for problem solving; knowledge representation; logical inference; reasoning under uncertainty; statistical models and machine learning. ,[1] understand the basic principles and technologies of intelligent computer systems; [2] explain the algorithms to achieve AI; [3] develop some AI programs,50,50,3.0,,,,
53,2022,6,36.0,,COMP2119 or FITE2000,,ELEC4544 or IIMT3688,,COMP3270B,This is an introduction course on the subject of artificial intelligence. Topics include: intelligent agents; search techniques for problem solving; knowledge representation; logical inference; reasoning under uncertainty; statistical models and machine learning. ,[1] understand the basic principles and technologies of intelligent computer systems; [2] explain the algorithms to achieve AI; [3] develop some AI programs,50,50,3.0,,,,
54,2022,6,,,COMP2119,,,,COMP3271,"Overview of graphics hardware, basic drawing algorithms, 2-D transformations, windowing and clipping, interactive input devices, curves and surfaces, 3-D transformations and viewing, hidden-surface and hidden-line removal, shading and colour models, modelling, illumination models, image synthesis, computer animation.","[Computer graphics concepts] Be able to understand the basic concepts and apply them in analyzing and solving problems.; [Computer graphics models] Be able to understand the meaning and purpose of mathematical models in computer graphics, derive parameters for such models, implement such models in software systems, and apply such models to explain real-world phenomena.; [Computer graphics algorithms] Be able to disseminate and implement computer graphics algorithms, and understand their computing requirements.; [Computer graphics tools] Be able to use 2D and 3D graphics libraries, such as OpenGL, in software development.",50,50,6.0,,,,
55,2022,6,34.0,,COMP2119 or ELEC2543 or FITE2000; and MATH1853 or MATH2014,,,,COMP3314A,"This course introduces algorithms, tools, practices, and applications of machine learning. Topics include core methods such as supervised learning (classification and regression), unsupervised learning (clustering, principal component analysis), Bayesian estimation, neural networks; common practices in data pre-processing, hyper-parameter tuning, and model evaluation; tools/libraries/APIs such as scikit-learn, Theano/Keras, and multi/many-core CPU/GPU programming. ","[1] understand the motivations and principles for building adaptive systems based on empirical data, and how machine learning relates to the broader field of artificial intelligence; [2] formulate problems associated with domain specific data (e.g., image classification, document clustering) in terms of abstract models of machine learning; [3] implement solutions to machine learning problems using tools such as Matlab or Octave, apply numerical optimization algorithms",50,50,5.0,,"Lecture:
      34.0


Tutorial:
      5.0",,
56,2022,6,34.0,,COMP2119 or ELEC2543 or FITE2000; and MATH1853 or MATH2014,,,,COMP3314B,"This course introduces algorithms, tools, practices, and applications of machine learning. Topics include core methods such as supervised learning (classification and regression), unsupervised learning (clustering, principal component analysis), Bayesian estimation, neural networks; common practices in data pre-processing, hyper-parameter tuning, and model evaluation; tools/libraries/APIs such as scikit-learn, Theano/Keras, and multi/many-core CPU/GPU programming. ","[1] understand the motivations and principles for building adaptive systems based on empirical data, and how machine learning relates to the broader field of artificial intelligence; [2] formulate problems associated with domain specific data (e.g., image classification, document clustering) in terms of abstract models of machine learning; [3] implement solutions to machine learning problems using tools such as Matlab or Octave, apply numerical optimization algorithms",50,50,5.0,,"Lecture:
      34.0


Tutorial:
      5.0",,
57,2022,6,34.0,,COMP2119 or ELEC2543 or FITE2000; and MATH1853 or MATH2014,,,,COMP3314C,"This course introduces algorithms, tools, practices, and applications of machine learning. Topics include core methods such as supervised learning (classification and regression), unsupervised learning (clustering, principal component analysis), Bayesian estimation, neural networks; common practices in data pre-processing, hyper-parameter tuning, and model evaluation; tools/libraries/APIs such as scikit-learn, Theano/Keras, and multi/many-core CPU/GPU programming. ","[1] understand the motivations and principles for building adaptive systems based on empirical data, and how machine learning relates to the broader field of artificial intelligence; [2] formulate problems associated with domain specific data (e.g., image classification, document clustering) in terms of abstract models of machine learning; [3] implement solutions to machine learning problems using tools such as Matlab or Octave, apply numerical optimization algorithms",50,50,5.0,,"Lecture:
      34.0


Tutorial:
      5.0",,
58,2022,6,,,MATH1853 or MATH2014 or MATH2101,,,,COMP3316,"This course offers an introduction to the interdisciplinary field of quantum information and computation. We will start from the basic rules of quantum theory and become familiar with the counterintuitive notions of quantum superposition and entanglement. In particular, we will see how quantum systems could be used to detect an object without directly interacting with it (Elitzur-Vaidman bomb tester), to increase the amount of bits that can be sent through a transmission line (dense coding), and to increase the chance to win certain games (CHSH game and GHZ game). Once the basics have been covered, we will provide an overview of quantum computation and of major quantum algorithms such as Grover's search algorithm and Shor's factoring algorithm for prime factorization. Finally, we will introduce the upgraded framework of quantum theory, and use it to explore applications to quantum error correction, quantum state discrimination, quantum cryptography, and quantum teleportation. ","[Basic Working knowledge] Able to use the basic rules of quantum theory: states, measurements, gates, composite systems.; [Modeling] Able to model basic information-theoretic tasks in the quantum domain: quantum communication, quantum games, quantum computation.; [Higher-level reasoning] Able to deduce new results from the basic knowledge provided in the course.; [Self-learning] Able to self-learn a new topic and/or to approach a mini research problem.",50,50,4.0,,,,
59,2022,6,,,COMP2119; and MATH1853 or MATH2014 or MATH2101,,,,COMP3317,"This course introduces the principles, mathematical models and applications of computer vision. Topics include: image processing techniques, feature extraction techniques, imaging models and camera calibration techniques, stereo vision, and motion analysis.","[Image processing] Students understand how images are digitally represented and learn how to perform image processing, e.g. logic and arithmetic operations, convolution, and filtering.; [Feature extraction] Students are able to implement low-level edge and corner detection algorithms to discard redundant and preserve useful information.; [Camera model and calibration] Students are able to model a projective pinhole camera by applying techniques such as perspective projection, rigid body motion and homogeneous coordinates. Students are able to discover the intrinsic and extrinsic camera parameters using linear least squares on a set of equations.; [Stereo vision] Students are able to extract 3D information from images and recover world positions through triangulation. They understand fundamental concepts in multiple view geometry, such as the correspondence problem, the essential/fundamental matrix, and the epipolar geometry.",50,50,13.0,,,,
60,2022,6,36.0,16.0,COMP1117 or ENGG1330,,IIMT3663,,COMP3322A,"Selected network protocols relevant to the World Wide Web (e.g., HTTP, DNS, IP); World Wide Web; technologies for programming the Web (e.g, HTML, XML, style sheets, PHP, JavaScript, Node.js.; other topics of current interest (AJAX, HTML5, web services, cloud computing).",[Web technologies] Able to master the key technologies about the World Wide Web and be able to contrast similar technologies.; [Application Development] Able to implement web based systems to solving real-life problems,60,40,,,,,
61,2022,6,36.0,16.0,COMP1117 or ENGG1330,,IIMT3663,,COMP3322B,"Selected network protocols relevant to the World Wide Web (e.g., HTTP, DNS, IP); World Wide Web; technologies for programming the Web (e.g, HTML, XML, style sheets, PHP, JavaScript, Node.js.; other topics of current interest (AJAX, HTML5, web services, cloud computing).",[Web technologies] Able to master the key technologies about the World Wide Web and be able to contrast similar technologies.; [Application Development] Able to implement web based systems to solving real-life problems,60,40,,,,,
62,2022,6,,,COMP2113 or COMP2123 or ENGG1340,,,,COMP3329,"This course introduces the concepts and techniques for computer game design and development. Topics include: game history and genres, game design process, game engine, audio and visual design, 2D and 3D graphics, physics, optimization, camera, network, artificial intelligence and user interface design. Students participate in group projects to gain hands-on experience in using common game engine in the market. ","[implement a workable game in particular platform] Be able to implement a workable game in particular platform; [understand different aspects of game design] Be able to understand different aspects of game design including UI, programming, marketing, etc.; [present the game idea in both written and oral form] Be able to present the game idea in both written and oral form; [learn new development environment] Be able to learn new development environment; [learn from other source codes and projects] Be able to learn from other source codes and projects",70,30,10.0,,,,
63,2022,6,,,COMP2396 or FITE2000,,,,COMP3330,"This course aims at introducing the design and development issues of mobile apps. Students will learn the basic principles, constraints and lifecycle of mobile apps. Then they will learn how to use modern object-oriented languages for the development and different design patterns. Next they will learn various development issues such as graphics, touch events, handling of concurrency, sensors, location services and server connection. Students will also participate in both individual assignments and group project to practice ideation, reading, writing, coding and presentation throughout this course.","[1] Understand the basics about mobile apps development, including features of mobile devices, types and lifecycle of applications, and markets; [2] Be able to develop mobile applications using common IDEs in the community; [3] Understand various components for interactive mobile application development, including user interface design, graphics, handling of concurrency, local database, network, multimedia, use of sensors and location services, testing and publication of mobile apps; [4]   Exercise project management skills including ideation, reading, writing, coding, and presentation; [5] Possess the mentality to deal with the fast-changing future mobile application development world",70,30,10.0,,,,
64,2022,6,,,COMP2119 or ELEC2543 or FITE2000; and MATH1853 or MATH2014,,ELEC4544,,COMP3340,"An introduction to algorithms and applications of deep learning.  The course helps students get hands-on experience of building deep learning models to solve practical tasks including image recognition, image generation, reinforcement learning, and language translation. Topics include: machine learning theory; optimization in deep learning; convolutional neural networks; recurrent neural networks; generative adversarial networks; reinforcement learning; self-driving vehicle.","[1] understand the motivations and principles for building deep learning systems based on empirical data, and how deep learning relates to the broader field of artificial intelligence.; [2] formulate problems associated with domain specific data (e.g., image recognition, image generation, reinforcement learning, and language translation) in terms of deep learning models.; [3] implement solutions to computer vision, natural language processing, and robotic problems using deep learning toolboxes such as PyTorch or Tensorflow, apply numerical optimization algorithms.",50,50,13.0,,,,
65,2022,6,,8.0,COMP1117 or ENGG1330,,,,COMP3353,"The goal of the course is for students to be grounded in basic bioinformatics concepts, algorithms, tools, and databases. Students will be leaving the course with hands-on bioinformatics analysis experience and empowered to conduct independent bioinformatics analyses. We will study: 1) algorithms, especially those for sequence alignment and assembly, which comprise the foundation of the rapid development of bioinformatics and DNA sequencing; 2) the leading bioinformatics tools for comparing and analyzing genomes starting from raw sequencing data; 3) the functions and organization of a few essential bioinformatics databases and learn how they support various types of bioinformatics analysis. ","[Bioinformatics Algorithms] Be able to understand the important algorithms used in bioinformatics.; [Bioinformatics Tools] Be able to understand the theoretical foundations and applications for several leading bioinformatics tools.; [Bioinformatics Database] Be able to understand the function and organization of a few essential bioinformatics databases, and how do they support various types of bioinformatics analysis.; [Bioinformatics Analysis] Be able to perform a few basic bioinformatics analyses using both existing and self-written tools.; [Bioinformatics Self-learning] Be able to utilize the learnt knowledge to understand a bioinformatics new topic.",70,30,2.5,,,,
66,2022,6,,,COMP2119 or ELEC2543 or FITE2000,,ELEC4641,,COMP3355,"This course introduces the principles, mechanisms and implementation of cyber security and data protection. Knowledge about the attack and defense are included. Topics include notion and terms of cyber security; network and Internet security, introduction to encryption: classic and modern encryption technologies; authentication methods; access control methods; cyber attacks and defenses (e.g. malware, DDoS).","[Foundation] Be able to understand the principles and objectives of information security, encryption, cyber-attacks and defense.; [Model] Be able to understand security models and to apply the model to achieve the security objectives.; [Design] Be able to understand the basic principles of security design and to apply the principles.; [Application] Be able to understand the security issues of a real-life Internet applications.; [Application development] Be able to implement a practical Internet application in a secure manner.",50,50,3.0,,,,
67,2022,6,,,MATH1853 or MATH2014; and COMP2121 or STAT2601; and COMP2119 or FITE2000,,,,COMP3356,"This course provides an introduction to mathematics and algorithms underneath state-of-the-art robotic systems. The majority of these techniques are heavily based on probabilistic reasoning and optimization – two areas with wide applicability in modern AI. We will also cover some basic knowledge about robotics, namely geometry, kinematics, dynamics, control of a robot, as well as the mathematical tools required to describe the spatial motion of a robot will be presented. In addition, we will cover perception, planning, and learning for a robotic system, with the obstacle avoidance and robotic arm manipulation as typical examples. Note: The focus of the course is on mathematics and algorithms; we will not study mechanical or electrical design of robots.","[1] Understand the motivations and principles for building autonomous robotic system based on sensory perception, control principles, and AI algorithms; and how robotics relates to the broader field of artificial intelligence; [2] Formulate problems associated with domain specific data (e.g., obstacle avoidance and robotic arm manipulation) in terms of abstract models of robotics and AI algorithms; [3] Implement solutions to robotics problems using tools such as Matlab, apply numerical optimization and machine learning algorithms",50,50,,,,,
68,2022,6,,,MATH1853 or MATH2014 or MATH2101,,,,COMP3357,"This course offers a gentle introduction to the field of cryptography. We will start from the basic principles of confidentiality, integrity and authentication.  After that, we will go through some fundamental cryptographic primitives like hash function, symmetric key encryption, public key encryption and digital signatures.  Finally, we will introduce the basics of quantum cryptography including quantum key distribution and random number generation. ","[Basic working knowledge] Understand the basic elementary knowledge of one-way function, such as discrete logarithm and RSA. Learn the elementary tools of pseudorandom number generator.  Be familiar with tools of quantum information theory.   Understand the basics of modern quantum cryptography including quantum key distribution and quantum random number generation.; [Problem modeling] Model the security requirements of confidentiality, integrity and authentication, such as the Chosen Ciphertext Attack (CCA) model. Model cryptographic tasks in quantum theory.; [Problem solving] Understand the difference between cryptographic primitives like hash function, symmetric key encryption, public key encryption and digital signatures.  Apply different cryptographic primitives in practical applications.  Establish the security of simple protocols for quantum key distribution and random bit generation.; [Self-learning] Able to self-learn basic topics in cryptography come up with creative solutions to simple problems",50,50,4.0,,,,
69,2022,6,,,COMP3230 or COMP3234,,,,COMP3358,"This course introduces the basic concepts and modern software architectures on distributed and parallel computing. Topics include: computer network primitives, distributed transactions and two-phase commits, webservices, parallelism and scalability models, distributed consistency models, distributed fault-tolerance, actor and monads, Facebook photo cache, Amazon key-value stores, Google Map-reduce, Spark, and TensorFlow.","[Distributed and Parallel Computing Concepts] Students are able to apply distributed and parallel computing concepts, to make correct conceptual choices, and to design software architectures for solving real-world problems.; [Distributed Fault-tolerant Architectures] Students are able to design and implement distributed software architectures that are efficient and fault-tolerant, and to deploy them on modern clouds.; [Parallel Computing Architectures] Students are able to design and implement parallel software architectures to process the drastically increasing amount of data in an efficient, scalable, and fault-tolerant manner.",50,50,13.0,,,,
70,2022,6,,,COMP2119,,,,COMP3360,"Basics of character animation, keyframe animation, motion capture, inverse kinematics, physically based character animation, Basics of physically-based animation, rigid body dynamics, point-based dynamics, hair animation, cloth simulation, facial animation, crowd simulation, mesh-shape editing, performance capture, skinning, data-driven character control, data-driven cloth animation, data-driven facial animation, data-driven skinning.","[1] understand the motivation and principles for character animation, as well as the skills for implementing such techniques; [2] understand the motivation and principles of physical simulation; [3] understand the motivation and techniques for learning character animation and physical simulation, implement solutions to learn from character motion data or physical animation data",50,50,13.0,,,,
71,2022,6,,,COMP3314 or COMP3340; and MATH1853,,,,COMP3361,"Natural language processing (NLP) is the study of human language from a computational perspective. The course will be focusing on machine learning and corpus-based methods and algorithms. We will cover syntactic, semantic and discourse processing models. We will describe the use of these methods and models in applications including syntactic parsing, information extraction, statistical machine translation, dialogue systems, and summarization. This course starts with language models (LMs), which are both front and center in natural language processing (NLP), and then introduces key machine learning (ML) ideas that students should grasp (e.g. feature-based models, log-linear models and then the neural models). We will land on modern generic meaning representation methods (e.g. BERT/GPT-3) and the idea of pretraining / finetuning.","1.       able to understand the motivations and principles for building natural language processing systems; 2.       able to master a set of key machine learning / statistical methods which are widely used in and beyond NLP; 3.       able to implement practical applications of NLP using tools such as NLTK, Pytorch and Dynet",50,50,13.0,,,,
72,2022,6,,,COMP3314,,COMP3359,,COMP3362,"This course allows students to experience a complete AI experimentation and evaluation cycle with a hands-on project.  The course comprises two main components: students first acquire the basic know-how of the state-of-the-art AI technologies, platforms and tools (e.g., TensorFlow, PyTorch, scikit-learn) via example-based modules in a self-paced learning mode.  Students will then identify a creative or practical data-driven application and implement an AI-powered solution for the application as the course project.","1.       understand the basics and general frameworks of the common AI approaches (e.g., search, machine learning, deep learning) for problem solving; 2.       understand the workflow, the capabilities and the limitations of some state-of-the-art AI technologies, platforms and tools for solving data intensive problems with AI approaches; 3.       identify potential AI-oriented tasks in a problem; design and implement AI pipelines properly in solving the corresponding tasks; 4.       carry out AI experimentation with justifiable processes and evaluation; analyze and address potential issues arising from the experimentation",100,,,,,,
73,2022,6,,,MATH1853; and COMP2119,,,,COMP3366,"Quantum computing can perform hard computational tasks that are far beyond the reach of conventional computers. This course will focus on quantum computing and its realization, offering a tour through the most important concepts and the most recent progresses. The course consists of four major parts: basics of quantum computing, quantum algorithms, quantum machine learning, and quantum error correction. The course starts with an introduction to the essential ingredients of quantum circuits. We will get familiar with quantum computing by going through representative quantum algorithms and visiting more advanced topics in quantum machine learning. We will then discuss how to build a quantum computer: various ways of implementing quantum computations and coping with noises will be discussed. Finally, we will conclude the course with an overview of recent progresses and with a perspective on the future of quantum computing. Tutorials will also be offered on quantum programming, where we will design our own quantum algorithms that address practical problems.","[Concepts] Familiar with the quantum circuit model, rules of quantum computation as well as basic elements of quantum computing architecture.; [Problem solving] Able to solve basic problems in quantum computing and quantum error correction, such as evaluating the outcome and the efficiency of an algorithm or determining the distance of a quantum code.; [Algorithm design] Proficient in one quantum programming language.     Able to identify the right quantum algorithm for a specific task.    Able to work as a team in designing a quantum algorithm and presenting the algorithm to the audience.",50,50,3.0,,,,
74,2022,6,,,COMP2119,,,,COMP3516,"This course introduces basic concepts, technologies, and applications of the Internet of Things (IoT), with a focus on data analytics. The course covers a range of enabling techniques in sensing, computing, analytics, learning for IoT and connects them to exciting applications in smart homes, healthcare, security, etc. The lectures cover the pipeline of data generation, data acquisition, data transportation, data analysis and learning, and data applications, with various topics from the fundamentals (e.g., signal processing, statistical analysis, machine learning) to real-world systems. Billions of things are connected today, and this course helps students to understand how IoT will evolve into AIoT (Artificial Intelligence of Things).","1.       Be able to understand the concepts and applications of IoT, and understand the core problems (e.g., networking, sensing) for building IoT systems; 2.       Be able to understand and manage the knowledge of models and principles and compare the performance of key techniques for IoT data analytics.; 3.       Be able to identify and implement practical IoT applications with data analytics techniques",60,40,6.0,,,,
75,2022,6,,,FITE1010 or MATH1853 or MATH2101; and COMP2119 or ELEC2543 or FITE2000,,COMP3323,,FITE3010,"To study some important topics and techniques in big data and data mining. The teaching and learning will focus on the algorithmic and system aspects of these topics. Survey on recent development and progress in selected areas will also be included.The course will study some advanced topics and techniques in big data, with a focus on the algorithmic and system aspects. It will also survey the recent development and progress in selected areas. Topics include: spatial-spatiotemporal data management, textual big data, uncertain data management, indexing, query evaluation and optimization, and data mining.","[Recent Development in Big Data] Able to understand the background and knowledge of some contemporary topics in Big Data; typical topics are spatial big data, spatial networks, textual big data, and uncertain data management.; [Recent Development in Data Mining] Able to understand the background and knowledge of some contemporary topics in data mining, typical topics are association rule mining, clustering, information ranking, data integration.; [Advanced Topics in Database Systems] Able to understand the background and knowledge of some advanced topics in large database systems; typical topics are indexing, query evaluation, and query optimization.; [Application Development] Able to implement some practical application modules based on selected advanced Big Data techniques",50,50,11.0,,,,
76,2022,6,,,FITE1010 or MATH1853 or MATH2101; and COMP2119 or ELEC2543 or FITE2000,,,,FITE3012,"The course covers banking systems, e-payment security, foreign exchange, Internet banking, wireless payments, stored-value cards, micropayments, peer-to-peer payments, electronic and crypto-currencies such as Bitcoin, large-scale B2B payments and the future of money.","[Technical foundation] Acquire a fundamental understanding of crypto-currency and e-payment, including basic principles, technical and business aspects. Identify key components behind the design of crypto-currency and e-payment systems.; [Applications and programming] Design and implement crypto-currency and e-payment systems / applications; and evaluate different designs/solutions for such systems, applications and protocols.; [Cryptocurrency and related issues] Understand the technologies behind different crypto-currencies and different e-payment systems, and related issues such as legal and regulatory requirements; [Limitations and extensions] Follow trends of e-payment and crypto-currencies, understand the impact, limitations, pros and cons of different e-payment and crypto-currencies.",40,60,6.0,,,,
77,2022,6,,,,,,,COMP7310,,,,,,,,,
78,2022,6,,,,,,,COMP7607,,,,,,,,,
